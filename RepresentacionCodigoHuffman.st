Object subclass: #MockArchivoAbecedario	instanceVariableNames: 'cadenaDeCaracteres'	classVariableNames: ''	poolDictionaries: ''	category: 'RepresentacionCodigoHuffman'!!MockArchivoAbecedario methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 15:11'!cadenaDeCaracteres 	^cadenaDeCaracteres ! !!MockArchivoAbecedario methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 15:11'!cadenaDeCaracteres: unaCadena	cadenaDeCaracteres:=unaCadena ! !!MockArchivoAbecedario methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/21/2012 09:22'!initialize	super initialize.	self cadenaDeCaracteres: 'AAAAAAAFDDDDDDDDDDGGGGTTGGGGGDDEEEESSDDSSSSSSSSSS'.! !Object subclass: #RepresentacionHuffman	instanceVariableNames: 'abecedarioConFrecuencias nodoTodoPoderoso ventanaNodos posicionInicial'	classVariableNames: ''	poolDictionaries: ''	category: 'RepresentacionCodigoHuffman'!!RepresentacionHuffman methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 17:29'!InicializaConstruccionDeArbol	|var1 var2 nuevoNodo|	[self abecedarioConFrecuencias notEmpty] whileTrue: [	var1 := self abecedarioConFrecuencias first.	self abecedarioConFrecuencias remove: var1.	self abecedarioConFrecuencias isEmpty ifTrue: [		nodoTodoPoderoso:= var1.				];ifFalse:[				var2:= self abecedarioConFrecuencias first.		self abecedarioConFrecuencias remove: var2.			nuevoNodo:= ElementoAbecedario new.		nuevoNodo frecuencia: (var1 frecuencia + (var2 frecuencia)).		nuevoNodo caracter: (var1 caracter asString , var2 caracter asString ).		nuevoNodo izquierda: var1.		nuevoNodo derecha: var2.				var1 padre: nuevoNodo.		var2 padre: nuevoNodo.				Transcript show: 'Nodo nuevo: caracter - ',nuevoNodo caracter asString, ' frecuencia - ', nuevoNodo frecuencia asString ;cr.		 		self abecedarioConFrecuencias add: nuevoNodo.		self ordenarAbecedario.						].		].		! !!RepresentacionHuffman methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 15:01'!abecedarioConFrecuencias 	^abecedarioConFrecuencias ! !!RepresentacionHuffman methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 15:00'!abecedarioConFrecuencias: unAbecedario	abecedarioConFrecuencias:= unAbecedario! !!RepresentacionHuffman methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 15:36'!determinarAbecedarioConFrecuencias	"TODO lectura de archivo para el conteo de frecuencias de abecedario"	|tablaDeFrecuencias tieneElemento nuevoElemento elElemento|			tablaDeFrecuencias := OrderedCollection new.	(MockArchivoAbecedario new cadenaDeCaracteres)do:[:each|				Transcript show: 'representacion each ', each asString ;cr.		tablaDeFrecuencias isEmpty ifTrue: [			nuevoElemento := ElementoAbecedario new.			nuevoElemento caracter: each.			nuevoElemento frecuencia: 0.			nuevoElemento frecuencia: ( (nuevoElemento frecuencia) + 1).								tablaDeFrecuencias add: nuevoElemento .			];ifFalse: [						tieneElemento := tablaDeFrecuencias select: [:elemento | ((elemento caracter asSymbol) = (each asSymbol ))].		      		tieneElemento isEmpty ifTrue:[			nuevoElemento := ElementoAbecedario new.			nuevoElemento caracter: each.			nuevoElemento frecuencia: 0.			nuevoElemento frecuencia: ( (nuevoElemento frecuencia) + 1).								tablaDeFrecuencias add: nuevoElemento.						]; ifFalse:[				elElemento:= tieneElemento first.				elElemento frecuencia: ((elElemento frecuencia) + 1).				]. 			].					].			Transcript show: 'El abecedario queda de la siguiente forma', tablaDeFrecuencias asString ;cr.		"Imprimiendo cada caracter con su respectiva frecuencia"		tablaDeFrecuencias do:[:cadaUno |				Transcript show: 'El caracter ', cadaUno caracter asString ,' tiene una frecuencia de', cadaUno frecuencia  asString ;cr.				].		^tablaDeFrecuencias ! !!RepresentacionHuffman methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/11/2012 14:17'!initialize 	super initialize.	self abecedarioConFrecuencias: self determinarAbecedarioConFrecuencias.	self ordenarAbecedario.	self InicializaConstruccionDeArbol.	self recorrerElArbol.	Transcript show: 'Se supone que el nodo machin es:', nodoTodoPoderoso asString, 'Compadre - ',nodoTodoPoderoso padre asString  ;cr.	Transcript show: 'Representacion de arbol finalizada';cr.! !!RepresentacionHuffman methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 15:54'!ordenarAbecedario	|listaOrdenada|	listaOrdenada := self abecedarioConFrecuencias asSortedCollection:[:uno :otro | (uno frecuencia) < (otro frecuencia) ].	Transcript show: '+++++++Tabla Ordenada ';cr.	 	listaOrdenada do:[:cadaUno |				Transcript show: 'El caracter ', cadaUno caracter asString ,' tiene una frecuencia de', cadaUno frecuencia  asString ;cr.				].		self abecedarioConFrecuencias: listaOrdenada.	! !!RepresentacionHuffman methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/12/2012 08:29'!posicionInicial 	^posicionInicial ! !!RepresentacionHuffman methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/12/2012 08:29'!posicionInicial: unaPosicion	posicionInicial:=unaPosicion 	! !!RepresentacionHuffman methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/12/2012 12:54'!recorre: unNodo conElementos: elementosActuales	"Verificamos si nodo tiene nodos hacia la izquierda"	| label pos representacion nodo label2 otroNodo |	(unNodo izquierda isNil) ifFalse: [				elementosActuales add:0.				self recorre: unNodo izquierda  conElementos: elementosActuales . 		]; ifTrue: [				].			(unNodo derecha isNil) ifFalse: [						elementosActuales add:1.			self recorre: unNodo derecha  conElementos: elementosActuales .			 			];ifTrue: [									].		pos :=self posicionInicial .		representacion := ''.		elementosActuales do: [:cadaUno | Transcript show: cadaUno asString.			cadaUno value = 0 ifTrue: [pos := pos + (-70@70)]; ifFalse: [pos := pos + (70@70)].			representacion:= representacion copyWith: (cadaUno asString last asCharacter ).			].		Transcript show: 'Valor: ', unNodo caracter asString , ' representacion: ', representacion asString.		Transcript cr.		label := self ventanaNodos  newLabel: unNodo caracter asString, ' : ', representacion asString .		label position: pos + (0@50).				label2 := self ventanaNodos  newLabel: unNodo frecuencia asString.		label2 position: pos + (20@10).		nodo := Morph new.		nodo color: Color blue.		nodo position: pos .				self ventanaNodos addMorph:nodo.		self ventanaNodos addMorph: label . 		self ventanaNodos addMorph: label2 .						unNodo izquierda isNil ifFalse: [			otroNodo := (ImageReadWriter formFromFileNamed: 'lineaIzq.png') asMorph.			otroNodo color: Color green.			otroNodo position: pos +(-33@38).						self ventanaNodos addMorph: otroNodo .			].				unNodo derecha isNil ifFalse: [			otroNodo := (ImageReadWriter formFromFileNamed: 'lineaDer.png') asMorph.			otroNodo color: Color green.			otroNodo position: pos +(50@38).						self ventanaNodos addMorph: otroNodo .			].						elementosActuales isEmpty ifFalse: [			elementosActuales removeAt: (elementosActuales size).			].				! !!RepresentacionHuffman methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/12/2012 11:03'!recorrerElArbol 	self ventanaNodos: StandardWindow new.	self ventanaNodos title:' Representacion Huffman'. 	self posicionInicial: ((self ventanaNodos center) x + 190)@(30).	self recorre: nodoTodoPoderoso conElementos: OrderedCollection new.	self ventanaNodos openInWorld.			! !!RepresentacionHuffman methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/12/2012 08:28'!ventanaNodos  ^ventanaNodos 		! !!RepresentacionHuffman methodsFor: 'as yet unclassified' stamp: 'EduardoValenzuela 11/12/2012 08:28'!ventanaNodos: unaVentana	ventanaNodos:=unaVentana 			! !Object subclass: #ElementoAbecedario	instanceVariableNames: 'caracter frecuencia derecha izquierda padre'	classVariableNames: ''	poolDictionaries: ''	category: 'RepresentacionCodigoHuffman'!!ElementoAbecedario methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 15:19'!caracter 	^caracter ! !!ElementoAbecedario methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 15:18'!caracter: unCaracter	caracter := unCaracter ! !!ElementoAbecedario methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 17:20'!derecha 	^derecha ! !!ElementoAbecedario methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 17:20'!derecha: unElemento	derecha:= unElemento ! !!ElementoAbecedario methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 15:19'!frecuencia	 ^frecuencia ! !!ElementoAbecedario methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 15:19'!frecuencia: unaFrecuencia	frecuencia := unaFrecuencia ! !!ElementoAbecedario methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 15:09'!initialize 	super initialize.! !!ElementoAbecedario methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 17:21'!izquierda ^izquierda ! !!ElementoAbecedario methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 17:21'!izquierda: unElemento	izquierda:=unElemento ! !!ElementoAbecedario methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 17:24'!padre  ^padre ! !!ElementoAbecedario methodsFor: 'as yet unclassified' stamp: 'AlfaTeam 11/4/2012 17:23'!padre: unPapi	padre:=unPapi ! !